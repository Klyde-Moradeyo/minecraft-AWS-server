name: CD Discord Bot

on:
  push:
    branches:
      - main
    paths:
      - "discord_bot/**"
      - ".github/workflows/cd-discord-bot.yml"
  
jobs:
  set-env-vars:
    runs-on: ubuntu-latest
    outputs:
      tf_workspace: ${{ steps.set-env.outputs.tf_workspace }}
      config_directory: ${{ steps.set-env.outputs.config_directory }}
      git_tag_prefix: ${{ steps.set-env.outputs.git_tag_prefix }}
      working_dir: ${{ steps.set-env.outputs.working_dir }}
    steps:
    - name: Set Env Vars 
      id: set-env
      run: |
        ##### DEVELOPMENT ENVIRONMENT #####
        if [ "${{ github.ref }}" == "refs/heads/dev" ]; then
          INFRA_HANDLER_DIR="./terraform/dev/infrastructure_handler"
  
        ##### PRODUCTION ENVIRONMENT #####
        elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
          INFRA_HANDLER_DIR="./terraform/prod/infrastructure_handler"
        fi

        GIT_TAG_PREFIX="MSMC" # MSMC means Minecraft Server Management Container
        WORKING_DIR=""./fargate_task""
  
        echo "config_directory=$INFRA_HANDLER_DIR" >> "$GITHUB_OUTPUT"
        echo "git_tag_prefix=$GIT_TAG_PREFIX" >> "$GITHUB_OUTPUT"
        echo "working_dir=$WORKING_DIR" >> "$GITHUB_OUTPUT"

  deploy:
    name: Deploy app
    runs-on: ubuntu-latest
    needs: set-env-vars
    steps: 
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.4
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false
        
      - name: Initialize Terraform Env
        working-directory: ${{ needs.set-env-vars.outputs.config_directory }}
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
        run: |
          terraform init

          # Get Terraform outputs
          API_URL=$(terraform output -raw api_gateway_url)
          SERVER_IP=$(terraform output -raw eip)

          # Create Env Vars
          echo "API_URL=$API_URL" >> $GITHUB_ENV
          echo "SERVER_IP=$SERVER_IP" >> $GITHUB_ENV

          # Hide the Environment Variables
          echo "::add-mask::$API_URL"
          echo "::add-mask::$SERVER_IP"
      
      - name: Set up FLY CTL
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy Discord Bot
        working-directory: discord_bot
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}  
        run: |
          flyctl secrets set API_URL=${{ env.API_URL }}
          flyctl secrets set SERVER_IP=${{ env.SERVER_IP }}
          flyctl secrets set DEV_DISCORD_ACCOUNT_ID=${{ secrets.DEV_DISCORD_ACCOUNT_ID }}
          flyctl deploy --remote-only

  git-tag:
    uses: Klyde-Moradeyo/minecraft-AWS-server/.github/workflows/reusable-git-tag.yml@github-workflows
    needs: deploy
    with:
      git_tag_prefix: "SMB" # SMB means Server Management Bot
    secrets:
      gh_pat_token: ${{ secrets.GH_PAT }}
        