# Doc: https://developer.hashicorp.com/terraform/tutorials/automation/github-actions
name: CI/CD Infra handler + lambda

on:
  push:
    branches:
      - main
      - dev
    paths:
      - "terraform/infrastructure_handler/**"
      - "lambda_function/**"

jobs:
  filter:
    runs-on: ubuntu-latest
    outputs:
      lambda: ${{ steps.filter.outputs.lambda }}
      terraform: ${{ steps.filter.outputs.terraform }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            lambda:
              - 'lambda_function/**'
            terraform:
              - 'terraform/infrastructure_handler/**'
  set-env-vars:
    runs-on: ubuntu-latest
    outputs:
      tf_workspace: ${{ steps.set-env.outputs.tf_workspace }}
      config_directory: ${{ steps.set-env.outputs.config_directory }}
      git_tag_prefix: ${{ steps.set-env.outputs.git_tag_prefix }}
      tf_cloud_org: ${{ steps.set-env.outputs.tf_cloud_org }}
    steps:
    - name: Set Env Vars 
      id: set-env
      run: |
        ##### DEVELOPMENT ENVIRONMENT #####
        if [ "${{ github.ref }}" == "refs/heads/dev" ]; then
          TERRAFORM_WORKSPACE="dev-minecraft-infra"
          INFRA_HANDLER_DIR="./terraform/dev/infrastructure_handler"
  
        ##### PRODUCTION ENVIRONMENT #####
        elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
          TERRAFORM_WORKSPACE="prod-minecraft-infra"
          INFRA_HANDLER_DIR="./terraform/prod/infrastructure_handler"
          
        fi

        GIT_TAG_PREFIX="MSIH"  # MSIH means Minecraft Server Infrastructure Handler
        TF_CLOUD_ORG="mango-dev"
  
        echo "::set-output name=tf_workspace::$TERRAFORM_WORKSPACE"
        echo "::set-output name=config_directory::$INFRA_HANDLER_DIR"
        echo "::set-output name=git_tag_prefix::$GIT_TAG_PREFIX"
        echo "::set-output name=tf_cloud_org::$TF_CLOUD_ORG"

  ci-lambda:
    uses: Klyde-Moradeyo/minecraft-AWS-server/.github/workflows/reusable-ci-lambda_func.yml@github_workflows
    needs: [ filter, set-env-vars ]   
    with:
      filter: ${{ needs.filter.outputs.lambda }}
    secrets:
      gh_pat_token: ${{ secrets.GH_PAT }}

  cd-terraform-apply:
    needs: [ ci-lambda ]
    uses: Klyde-Moradeyo/minecraft-AWS-server/.github/workflows/reusable-cd-terraform-apply.yml@github_workflows
    with:
      tf_workspace: ${{ needs.set-env-vars.outputs.tf_workspace }}
      tf_cloud_org: ${{ needs.set-env-vars.outputs.tf_cloud_org }}
      config_dir: ${{ needs.set-env-vars.outputs.config_directory }}
      filter: ${{ needs.filter.outputs.terraform }}
    secrets:
      gh_pat_token: ${{ secrets.GH_PAT }}
      tf_api_token: ${{ secrets.TF_API_TOKEN }}

  git-tag:
    uses: Klyde-Moradeyo/minecraft-AWS-server/.github/workflows/reusable-git-tag.yml@github_workflows
    needs: [ cd-terraform-apply ]
    with:
      git_tag_prefix: ${{ needs.set-env-vars.outputs.git_tag_prefix }}
    secrets:
      gh_pat_token: ${{ secrets.GH_PAT }}