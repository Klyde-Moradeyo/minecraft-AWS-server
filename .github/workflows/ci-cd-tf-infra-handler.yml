# Doc: https://developer.hashicorp.com/terraform/tutorials/automation/github-actions
name: CI/CD Infra handler

on:
  push:
    branches:
      - main
    paths:
      - "terraform/infrastructure_handler/**"
      - "lambda_function/**"
      - "fargate_task/**"
env:
  TF_CLOUD_ORGANIZATION: "mango-dev"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: "minecraft-infra-handler"
  CONFIG_DIRECTORY: "./terraform/infrastructure_handler"
  GIT_TAG_PREFIX: "MCI" # MCI means Minecraft Infrastructure Coordinator

jobs:
  filter:
    runs-on: ubuntu-latest
    outputs:
      lambda: ${{ steps.filter.outputs.lambda }}
      terraform: ${{ steps.filter.outputs.terraform }}
      fargate: ${{ steps.filter.outputs.fargate }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            lambda:
              - 'lambda_function/**'
            terraform:
              - 'terraform/infrastructure_handler/**'
            fargate:
              - 'fargate_task/**'

  build-lambda:
    name: "Build Lambda Function"
    runs-on: ubuntu-latest
    needs: filter
    if: needs.filter.outputs.lambda == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.GH_PAT }}
    - name: Get Lambda MCI Tag
      run: |
        echo $(git tag -l -n)
        ls -l 
        # Get tags, filter those that start with MCI_, sort them and get the last one
        latest_tag=$(git tag | grep '^${{ env.GIT_TAG_PREFIX }}_' | sort -t. -k1,1n -k2,2n -k3,3n | tail -n1)
        echo "Latest Version: $latest_tag"
        echo "MCI_TAG=$latest_tag" >> $GITHUB_ENV
    - name: Increment Lambda MCI Tag
      run: |
        # Get tags, filter those that start with MCI_, sort them and get the last one
        latest_tag=${{ env.MCI_TAG }}

        if [[ -z "$latest_tag" ]]; then
          echo "No tags found starting with MCI_"
          exit 1
        fi

        # Remove the prefix "MCI_" from the tag
        version_string=${latest_tag#${{ env.GIT_TAG_PREFIX }}_}

        # Split the version string into an array
        version=(${version_string//./ })

        # Increment patch version
        version[2]=$((version[2] + 1))

        # Construct new tag
        MCI_TAG="${{ env.GIT_TAG_PREFIX }}_${version[0]}.${version[1]}.${version[2]}"

        echo "New tag is $MCI_TAG"
        echo "MCI_TAG=$MCI_TAG" >> $GITHUB_ENV
    - name: Build Docker image
      run: |
        ls -l
        docker build -t aws_lambda_img lambda_function/. --build-arg version=${{ env.MCI_TAG }}
    - name: Run Docker image
      run: |
        docker run --name lambda_payload_builder aws_lambda_img
    - name: Copy and validate lambda payload
      run: |
        lambda_function_payload_dir="./lambda_function/"
        docker cp lambda_payload_builder:/app/lambda_function_payload.zip $lambda_function_payload_dir

        package_size=$(du -m "$lambda_function_payload_dir" | cut -f1)
        echo "payload size: $package_size mb"
        if (( package_size > 50 )); then
            echo -e "Error: \nThe lambda_function_payload is larger than 50 MB \nDoc: https://docs.aws.amazon.com/lambda/latest/dg/python-package.html"
            exit 1
        fi
    - name: Upload lambda function payload
      uses: actions/upload-artifact@v2
      with:
        name: lambda-artifact
        path: ./lambda_function/lambda_function_payload.zip
    - name: Tag Version
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag "${{ env.MCI_TAG }}"
        git push https://dark-mango-bot:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}.git --tags

  build-fargate:
    name: "Build fargate task"
    runs-on: ubuntu-latest
    needs: filter
    if: needs.filter.outputs.fargate == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.GH_PAT }}
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.4.4
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    - name: Set Env Vars
      working-directory: ./terraform/minecraft_infrastructure
      run: |
        echo "ECR_REPO_URL=$(terraform output ecr_repository_url)" >> $GITHUB_ENV
    - name: Build Fargate Image
      working-directory: ./fargate_task
      run: |
        docker build -t ${{ env.IMAGE_NAME }}  .
        docker tag ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} ${{ env.ECR_REPO_URL }}:${{ env.IMAGE_TAG }}
    - name: Push Fargate Image
      working-directory: ./fargate_task
      run: |
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REPO_URL }}
        docker push ${{ env.ECR_REPO_URL }}:${{ env.IMAGE_TAG }}
    - name: Tag Git
      run: |
        latest_tag=$(git tag | grep '^${{ env.GIT_TAG_PREFIX }}_' | sort -t. -k1,1n -k2,2n -k3,3n | tail -n1)
        if [[ -z "$latest_tag" ]]; then
          echo "No tags found starting with ${{ env.GIT_TAG_PREFIX }}_"
          exit 1
        fi

        # Remove the prefix from the tag
        version_string=${latest_tag#${{ env.GIT_TAG_PREFIX }}_}

        # Split the version string into an array
        version=(${version_string//./ })

        # Increment patch version
        version[2]=$((version[2] + 1))

        # Construct new tag
        FARGATE_TAG="${{ env.GIT_TAG_PREFIX }}_${version[0]}.${version[1]}.${version[2]}"

        echo "New tag is $FARGATE_TAG"

        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag "${{ env.GIT_TAG_PREFIX }}"
        git push https://dark-mango-bot:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}.git --tags

        build-fargate:
          name: "Build fargate task"
          runs-on: ubuntu-latest
          steps:
          - name: Checkout code
            uses: actions/checkout@v3
            with:
              fetch-depth: 0
              token: ${{ secrets.GH_PAT }}
          - name: Setup Terraform
            uses: hashicorp/setup-terraform@v2
            with:
              terraform_version: 1.4.4
              cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          - name: Set Env Vars
            working-directory: ./terraform/minecraft_infrastructure
            run: |
              echo "ECR_REPO_URL=$(terraform output ecr_repository_url)" >> $GITHUB_ENV
          - name: Build Fargate Image
            working-directory: ./fargate_task
            run: |
              docker build -t ${{ env.IMAGE_NAME }}  .
              docker tag ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} ${{ env.ECR_REPO_URL }}:${{ env.IMAGE_TAG }}
          - name: Push Fargate Image
            working-directory: ./fargate_task
            run: |
              aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REPO_URL }}
              docker push ${{ env.ECR_REPO_URL }}:${{ env.IMAGE_TAG }}
          - name: Tag Git
            run: |
              latest_tag=$(git tag | grep '^${{ env.GIT_TAG_PREFIX }}_' | sort -t. -k1,1n -k2,2n -k3,3n | tail -n1)
              if [[ -z "$latest_tag" ]]; then
                echo "No tags found starting with ${{ env.GIT_TAG_PREFIX }}_"
                exit 1
              fi
      
              # Remove the prefix from the tag
              version_string=${latest_tag#${{ env.GIT_TAG_PREFIX }}_}
      
              # Split the version string into an array
              version=(${version_string//./ })
      
              # Increment patch version
              version[2]=$((version[2] + 1))
      
              # Construct new tag
              FARGATE_TAG="${{ env.GIT_TAG_PREFIX }}_${version[0]}.${version[1]}.${version[2]}"
      
              echo "New tag is $FARGATE_TAG"
      
              git config --local user.email "action@github.com"
              git config --local user.name "GitHub Action"
              git tag "${{ env.GIT_TAG_PREFIX }}"
              git push https://dark-mango-bot:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}.git --tags

  terraform-apply:
    name: "Terraform Apply"
    runs-on: ubuntu-latest
    needs: [build-lambda, build-fargate]
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_PAT }}
      - name: Download lambda function payload
        uses: actions/download-artifact@v2
        with:
          name: lambda-artifact
          path: ./terraform/minecraft_infrastructure
      - name: Create Apply Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
        id: apply-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.apply-upload.outputs.configuration_version_id }}
      - name: Apply
        uses: hashicorp/tfc-workflows-github/actions/apply-run@v1.0.0
        if: fromJSON(steps.apply-run.outputs.payload).data.attributes.actions.IsConfirmable
        id: apply
        with:
          run: ${{ steps.apply-run.outputs.run_id }}
          comment: "Apply Run from GitHub Actions CI ${{ github.sha }}"
