name: Reusable CI Lambda Function

on:
  workflow_call:
    secrets:
      gh_pat_token:
        required: true
      aws_id:
        required: true
      aws_key:
        required: true
      tf_api_token:
        required: true

env:
    AWS_REGION: "eu-west-2"
    IMAGE_NAME: "mc_infra_runner_img"
    IMAGE_TAG: "latest"
    GIT_TAG_PREFIX: "TEC" # TEC means Terraform Execution Container 

jobs:
    build-fargate:
        name: "Build fargate task"
        runs-on: ubuntu-latest
        steps:
        - name: Checkout code
          uses: actions/checkout@v3
          with:
            fetch-depth: 0
            token: ${{ secrets.gh_pat_token }}

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
          with:
            aws-access-key-id: ${{ secrets.aws_id }}
            aws-secret-access-key: ${{ secrets.aws_key }}
            aws-region: ${{ env.AWS_REGION }}

        - name: Login to ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1

        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v2
          with:
            terraform_version: 1.4.4
            cli_config_credentials_token: ${{ secrets.tf_api_token }}
            terraform_wrapper: false
            
        - name: Initialize Terraform Env
          working-directory: ./terraform/infrastructure_handler
          env:
            TF_TOKEN_app_terraform_io: ${{ secrets.tf_api_token }}
          run: |
            terraform init
            echo "ECR_REPO_NAME=$(terraform output -raw ecr_repository_name)" >> $GITHUB_ENV
          
        - name: Build Fargate Image
          working-directory: ./fargate_task
          env:
            REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          run: |
            docker build -t ${{ env.REGISTRY }}/${{ env.ECR_REPO_NAME }}:${{ env.IMAGE_TAG }} .

        - name: Push Fargate Image
          working-directory: ./fargate_task
          env:
            REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          run: |
            docker push  ${{ env.REGISTRY }}/${{ env.ECR_REPO_NAME }}:${{ env.IMAGE_TAG }}
            
        - name: Tag Git
          run: |
            latest_tag=$(git tag | grep '^${{ env.GIT_TAG_PREFIX }}_' | sort -t. -k1,1n -k2,2n -k3,3n | tail -n1)
            if [[ -z "$latest_tag" ]]; then
              echo "No tags found starting with ${{ env.GIT_TAG_PREFIX }}_"
              exit 1
            fi
    
            # Remove the prefix from the tag
            version_string=${latest_tag#${{ env.GIT_TAG_PREFIX }}_}
    
            # Split the version string into an array
            version=(${version_string//./ })
    
            # Increment patch version
            version[2]=$((version[2] + 1))
    
            # Construct new tag
            FARGATE_TAG="${{ env.GIT_TAG_PREFIX }}_${version[0]}.${version[1]}.${version[2]}"
    
            echo "New tag is $FARGATE_TAG"
    
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git tag "${{ env.GIT_TAG_PREFIX }}"
            git push https://dark-mango-bot:${{ secrets.gh_pat_token }}@github.com/${{ github.repository }}.git --tags
