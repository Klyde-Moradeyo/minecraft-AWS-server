name: Reusable CI Lambda Function

on:
  workflow_call:
    inputs:
      working_dir:
        description: 'Fargate Task Directory'
        type: string
        required: true
      tf_config_dir:
        description: 'Infrastructure handler Terraform manifest directory'
        type: string
        required: true
    secrets:
      gh_pat_token:
        required: true
      aws_id:
        required: true
      aws_key:
        required: true
      tf_api_token:
        required: true
      ssh_private_key:
        required: true
    outputs:
      artifact_name:
        description: "Artifact name"
        value: ${{ jobs.build-fargate.outputs.artifact_name }}
      docker_tar_file_name:
        description: "Docker Tar File Name"
        value: ${{ jobs.build-fargate.outputs.docker_tar_file_name }}
      image_tag:
        description: "IMAGE_TAG"
        value: ${{ jobs.build-fargate.outputs.image_tag }}

env:
    AWS_REGION: "eu-west-2"
    IMAGE_NAME: "mc_infra_runner_img"
    IMAGE_TAG: "latest"
    GIT_TAG_PREFIX: "TEC" # TEC means Terraform Execution Container 
    OUTPUT_ARTIFACT: "fargate_task.tar"

jobs:
    build-fargate:
        name: "Build fargate task"
        runs-on: ubuntu-latest
        outputs:
          artifact_name: ${{ steps.set-vars.outputs.artifact_name }}
          docker_tar_file_name: ${{ steps.set-vars.outputs.docker_tar_file_name }}
          image_tag: ${{ steps.set-vars.outputs.image_tag }}
        steps:
        - name: Checkout code
          uses: actions/checkout@v3
          with:
            fetch-depth: 0
            token: ${{ secrets.gh_pat_token }}

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
          with:
            aws-access-key-id: ${{ secrets.aws_id }}
            aws-secret-access-key: ${{ secrets.aws_key }}
            aws-region: ${{ env.AWS_REGION }}

        - name: Login to ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1

        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v2
          with:
            terraform_version: 1.4.4
            cli_config_credentials_token: ${{ secrets.tf_api_token }}
            terraform_wrapper: false

        - name: Setup SSH Key
          env:
            SSH_PRIVATE_KEY: ${{ secrets.ssh_private_key }}
          run: |
            mkdir -p ~/.ssh
            echo "${{ env.SSH_PRIVATE_KEY }}" | base64 -d > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            ssh-keyscan github.com >> ~/.ssh/known_hosts 
            
        - name: Initialize Terraform Env
          working-directory: ${{ inputs.tf_config_dir }}
          env:
            TF_TOKEN_app_terraform_io: ${{ secrets.tf_api_token }}
          run: |
            terraform init

            # Get Terraform outputs
            ECR_REPO_NAME=$(terraform output -raw ecr_repository_name)

            # Create Env Vars
            echo "ECR_REPO_NAME=$ECR_REPO_NAME" >> $GITHUB_ENV

            # Hide the Environment Variables
            echo "::add-mask::$ECR_REPO_NAME"

        - name: Build Fargate Image
          working-directory: ${{ inputs.working_dir }}
          env:
            REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          run: |
            docker build -t ${{ env.REGISTRY }}/${{ env.ECR_REPO_NAME }}:${{ env.IMAGE_TAG }} .
          
        - name: Save Docker image
          env:
            REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          run: |
            docker save ${{ env.REGISTRY }}/${{ env.ECR_REPO_NAME }}:${{ env.IMAGE_TAG }} > ${{ env.OUTPUT_ARTIFACT }}

            # Artifact name
            ARTIFACT_NAME="fargate-docker-image-${{ github.run_id }}"
            echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
            
        - name: Set Output Vars
          id: set-vars
          run: |
            # Outputs
            echo "docker_tar_file_name=${{ env.OUTPUT_ARTIFACT }}" >> "$GITHUB_OUTPUT"
            echo "image_tag=${{ env.IMAGE_TAG }}" >> "$GITHUB_OUTPUT"
            echo "artifact_name=${{ env.ARTIFACT_NAME }}" >> "$GITHUB_OUTPUT"
            
        - name: Upload Docker image as artifact
          uses: actions/upload-artifact@v2
          with:
            name: ${{ env.ARTIFACT_NAME }}
            path: ${{ env.OUTPUT_ARTIFACT }}